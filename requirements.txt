##main.py##
# main.py
from database.db_connection import *
from modules.customer_management import *
from modules.inventory_control import *
from modules.order_processing import *
from database.db_operations import *

def main_menu():
    print("Welcome to NeonNest!")
    print("Please select an option:")
    print("1. Manage Customers")
    print("2. Manage Inventory")
    print("3. Process Orders")
    print("4. View Products")
    print("5. View Sales Records")
    print("6. Create New Order")
    print("0. Exit")

    choice = input("Enter your choice: ")

    if choice == "1":
        manage_customers()
    elif choice == "2":
        manage_inventory()
    elif choice == "3":
        process_orders()
    elif choice == "4":
        products = get_all_products()
        for product in products:
            print(product)
    elif choice == "5":
        sales_records = get_all_sales()
        for record in sales_records:
            print(record)
    elif choice == "6":
        process_new_order()
    elif choice == "0":
        print("Exiting NeonNest. Goodbye!")
        close_connection()
        return
    else:
        print("Invalid choice. Please try again.")
        main_menu()

if __name__ == "__main__":
    try:
        initialize_connection()
        main_menu()
    except Exception as e:
        print("An error occurred:", str(e))
        close_connection()
###database###
##db_config.py##
# Database configuration settings
DB_CONFIG = {
    "host": "127.0.0.1",
    "user": "cs509@local",
    "password": "cs509pw",
    "database": "neon_nest_apt",
    "driver": "mysql",
    "port": 3306
}

##db_connection.py##
import mysql.connector
from mysql.connector import errorcode
from db_config import DB_CONFIG
# Global variable for the database connection
connection = None
# Function to initialize the database connection
def initialize_connection():
    global connection
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        print("Database connection successfully established.")
    except mysql.connector.Error as err:
        if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
            print("Invalid credentials")
        elif err.errno == errorcode.ER_BAD_DB_ERROR:
            print("Database not found")
        else:
            print(f"Error connecting to the database: {err}")
# Function to create a new database connection
def create_connection():
    return connection
# Function to close the database connection
def close_connection():
    global connection
    if connection and connection.is_connected():
        connection.close()
        print("Database connection closed.")
# Function to check if the database connection is active
def check_connection():
    global connection
    if connection and connection.is_connected():
        return True
    else:
        return False

##db_operations.py##
from db_connection import *
# Function to retrieve all customers from the database
def get_all_customers():
    conn = create_connection()
    with conn.cursor() as cursor:
        cursor.execute("SELECT * FROM customers")
        results = cursor.fetchall()
    return results
# Function to insert a new customer into the database
def insert_customer(customer):
    conn = create_connection()
    with conn.cursor() as cursor:
        query = "INSERT INTO customers (name, email) VALUES (%s, %s)"
        cursor.execute(query, (customer['name'], customer['email']))
        conn.commit()
# Function to update an existing customer in the database
def update_customer(customer):
    conn = create_connection()
    with conn.cursor() as cursor:
        query = "UPDATE customers SET name = %s, email = %s WHERE id = %s"
        cursor.execute(query, (customer['name'], customer['email'], customer['id']))
        conn.commit()
# Function to delete a customer from the database
def delete_customer(customer_id):
    conn = create_connection()
    with conn.cursor() as cursor:
        query = "DELETE FROM customers WHERE id = %s"
        cursor.execute(query, (customer_id,))
        conn.commit()
# Function to retrieve all products from the database
def get_all_products():
    conn = create_connection()
    with conn.cursor() as cursor:
        cursor.execute("SELECT * FROM products")
        results = cursor.fetchall()
    return results
# Function to retrieve all sales from the database
def get_all_sales():
    conn = create_connection()
    with conn.cursor() as cursor:
        cursor.execute("SELECT * FROM sales")
        results = cursor.fetchall()
    return results

###modules###
##customer_management.py##
from database.db_operations import *
from utils.encryption_util import *
from utils.input_validation import *
# Function to add a new customer
def add_new_customer():
    # Prompt user for customer information
    first_name = input("Enter customer first name: ")
    last_name = input("Enter customer last name: ")
    email = input("Enter customer email: ")
    phone = input("Enter customer phone number: ")
    # Validate input
    if not all([
        validate_string_input(first_name),
        validate_string_input(last_name),
        validate_email_format(email),
        validate_phone_number_format(phone)
    ]):
        print("Invalid input")
        return
    # Generate encryption key and encrypt customer email and phone number
    encryption_key = generate_key()
    encrypted_email = encrypt_data(encryption_key, email.encode())
    encrypted_phone = encrypt_data(encryption_key, phone.encode())
    # Create customer data dictionary
    customer_data = {
        "name": f"{first_name} {last_name}",
        "email": encrypted_email,
        "phone": encrypted_phone,
        "encryption_key": encryption_key
    }
    # Insert customer data into the database
    insert_customer(customer_data)
    print("Customer added successfully")
# Function to update customer information
def update_customer_info():
    # Prompt user for customer ID and new information
    customer_id = input("Enter customer ID for update: ")
    new_email = input("Enter new customer email: ")
    new_phone = input("Enter new customer phone number: ")
    # Validate input
    if not (validate_email_format(new_email) and validate_phone_number_format(new_phone)):
        print("Invalid input")
        return
    # Update customer information in the database
    update_customer({
        "id": customer_id,
        "email": new_email,
        "phone": new_phone
    })
    print("Customer information updated successfully")
# Function to list all customers
def list_all_customers():
    # Retrieve all customers from the database
    customers = get_all_customers()
    # Check if customers exist
    if customers:
        print("All customers:")
        # Iterate over each customer and print their decrypted information
        for customer in customers:
            decrypted_email = decrypt_data(customer['encryption_key'], customer['email'])
            decrypted_phone = decrypt_data(customer['encryption_key'], customer['phone'])
            print(f"Name: {customer['name']}, Email: {decrypted_email}, Phone: {decrypted_phone}")
    else:
        print("No customers found.")

##inventory_control##
from database.db_operations import *
def manage_inventory():
    # Displaying the inventory management options
    print("Inventory Management Options:")
    print("1. Add Inventory Item")
    print("2. Update Inventory Item")
    print("3. Delete Inventory Item")
    print("4. View Inventory List")
    # Prompting the user for their choice
    choice = input("Enter your choice: ")
    # Handling the user's choice
    if choice == "1":
        add_item()
    elif choice == "2":
        update_item()
    elif choice == "3":
        delete_item()
    elif choice == "4":
        view_inventory()
    else:
        print("Invalid choice. Please try again.")
def add_item():
    # Prompting the user to enter item details
    item_name = input("Enter item name: ")
    quantity = int(input("Enter quantity: "))
    # Adding the item to the inventory
    add_inventory_item(item_name, quantity)
    print("Item added to inventory")
def update_item():
    # Prompting the user to enter item ID and new quantity
    item_id = int(input("Enter item ID to update: "))
    new_quantity = int(input("Enter new quantity: "))
    # Updating the inventory with the new quantity
    update_inventory(item_id, new_quantity)
    print("Inventory updated")
def delete_item():
    # Prompting the user to enter item ID to delete
    item_id = int(input("Enter item ID to delete: "))
    # Deleting the item from the inventory
    delete_inventory_item(item_id)
    print("Item deleted from inventory")
def view_inventory():
    # Retrieving the inventory list
    inventory = get_inventory()
    # Displaying the inventory list if it is not empty
    if inventory:
        print("Inventory List:")
        for item in inventory:
            print(f"ID: {item['id']}, Name: {item['name']}, Quantity: {item['quantity']}")
    else:
        print("No items found in inventory.")

##order_processing##
from database.db_operations import *
from utils.input_validation import *
from utils.encryption_util import *
def process_orders():
    # Display the order processing options to the user
    print("Order Processing Options:")
    print("1. Update Order Status")
    print("2. Cancel Order")
    print("3. Retrieve Order Details")
    choice = input("Enter your choice: ")
    if choice == "1":
        update_order_status()
    elif choice == "2":
        cancel_order()
    elif choice == "3":
        retrieve_order_details()
    else:
        print("Invalid choice. Please try again.")
def update_order_status():
    # Update the status of an order in the database
    order_id = int(input("Enter order ID: "))
    new_status = input("Enter new status: ")
    if validate_integer_input(order_id):
        update_order_status_in_db(order_id, new_status)
        print("Order status updated")
    else:
        print("Invalid order ID")
def cancel_order():
    # Cancel an order in the database
    order_id = int(input("Enter order ID to cancel: "))
    if validate_integer_input(order_id):
        cancel_order_in_db(order_id)
        print("Order canceled")
    else:
        print("Invalid order ID")
def retrieve_order_details():
    # Retrieve and display the details of an order from the database
    order_id = int(input("Enter order ID: "))
    if validate_integer_input(order_id):
        order = get_order_details(order_id)
        if order:
            decrypted_details = decrypt_data(order['encryption_key'], order['details'])
            print("Order Details:", decrypted_details)
        else:
            print("Order not found")
    else:
        print("Invalid order ID")
def process_new_order():
    # Process a new order by encrypting the order details and storing them in the database
    order_details = input("Enter order details: ")
    encryption_key = generate_key()
    encrypted_details = encrypt_data(encryption_key, order_details.encode())
    create_order({
        "details": encrypted_details,
        "encryption_key": encryption_key
    })
    print("Order processed successfully")

###utils###
##encryption_util.py##
from cryptography.fernet import Fernet

def generate_key():
    """Generates a key for encryption and decryption using Fernet."""
    return Fernet.generate_key()

def encrypt_data(key, data):
    """Encrypts data using the provided key.
    
    Args:
        key: A bytes-like object representing the encryption key.
        data: A string to be encrypted.

    Returns:
        A bytes-like object representing the encrypted data.
    """
    cipher_suite = Fernet(key)
    encrypted_data = cipher_suite.encrypt(data.encode())
    return encrypted_data

def decrypt_data(key, encrypted_data):
    """Decrypts data using the provided key.
    
    Args:
        key: A bytes-like object representing the decryption key.
        encrypted_data: A bytes-like object representing the encrypted data.

    Returns:
        A string representing the decrypted data.
    """
    cipher_suite = Fernet(key)
    decrypted_data = cipher_suite.decrypt(encrypted_data).decode()
    return decrypted_data


##input_validation.py##
import re

def validate_string_input(input_string):
    """Validates if the given input is a non-empty string."""
    return isinstance(input_string, str) and bool(input_string.strip())

def validate_email_format(email):
    """Validates if the given email matches the email format."""
    email_regex = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(email_regex, email) is not None

def validate_integer_input(input_integer):
    """Validates if the given input is an integer."""
    return isinstance(input_integer, int)

def validate_date_format(date):
    """Validates if the given date matches the YYYY-MM-DD format."""
    date_regex = r'^\d{4}-\d{2}-\d{2}$'
    return re.match(date_regex, date) is not None

def validate_phone_number_format(phone):
    """Validates if the given phone number matches the XXX-XXX-XXXX format."""
    phone_regex = r'^\d{3}-\d{3}-\d{4}$'
    return re.match(phone_regex, phone) is not None

def validate_first_name(first_name):
    """Validates if the first name is a non-empty string and starts with an uppercase letter."""
    return validate_string_input(first_name) and first_name[0].isupper() and first_name.isalpha()

def validate_last_name(last_name):
    """Validates if the last name is a non-empty string and consists only of alphabetic characters or hyphens."""
    return validate_string_input(last_name) and all(part.isalpha() for part in last_name.split('-'))
